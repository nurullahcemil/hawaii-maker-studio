{% liquid
  assign event_drop = nil
  if section.settings.enable_metaobject
    assign mo_type = section.settings.mo_type | default: 'event'
    assign h_ns = section.settings.handle_mf_key | default: 'custom.event_handle' | split: '.' | first
    assign h_key = section.settings.handle_mf_key | default: 'custom.event_handle' | split: '.' | last
    
    # Read the product metafield (could be string or metaobject reference)
    assign raw_mf = product.metafields[h_ns][h_key]
    
    # Check if it's a metaobject reference (direct link)
    if raw_mf.type == 'metaobject_reference'
      assign event_drop = raw_mf.value
    elsif raw_mf != blank
      # It's a string value - try multiple lookup strategies
      assign raw_handle = raw_mf.value | default: raw_mf | default: ''
      assign handle = raw_handle | handleize
      
      # Strategy 1: Direct lookup by system handle
      if handle != blank
        assign event_drop = metaobjects[mo_type][handle]
        if event_drop == nil
          assign event_drop = shop.metaobjects[mo_type][handle]
        endif
      endif
      
      # Strategy 2: If direct lookup failed, search by field value
      if event_drop == nil and raw_handle != blank
        for mo in shop.metaobjects[mo_type]
          # Check if metaobject has event_handle field that matches
          assign mo_event_handle_value = mo.event_handle.value | default: mo.event_handle
          if mo_event_handle_value == raw_handle or mo_event_handle_value == handle
            assign event_drop = mo
            break
          endif
          # Also check handleized version
          assign mo_event_handle_handleized = mo_event_handle_value | handleize
          if mo_event_handle_handleized == handle
            assign event_drop = mo
            break
          endif
          # Also check system handle match
          assign mo_sys_handle = mo.system.handle | default: mo.handle
          if mo_sys_handle == handle
            assign event_drop = mo
            break
          endif
        endfor
      endif
    endif
  endif
%}

{% if section.settings.debug_mode %}
  <div style="background: #f0f0f0; padding: 20px; margin: 20px; border: 2px solid #333; font-family: monospace; font-size: 12px;">
    <strong>üîç DEBUG MODE (Dynamic Image with Text)</strong><br>
    <strong>Metaobject Enabled:</strong> {{ section.settings.enable_metaobject }}<br>
    <strong>Product:</strong> {{ product.title | default: "No product available" }}<br>
    <strong>Product Handle:</strong> {{ product.handle | default: "N/A" }}<br>
    <strong>Metafield Key:</strong> {{ section.settings.handle_mf_key | default: "custom.event_handle" }}<br>
    <strong>Metafield Raw Value:</strong> "{{ product.metafields.custom.event_handle }}"<br>
    <strong>Metafield Type:</strong> {{ product.metafields.custom.event_handle.type }}<br>
    <strong>Event Drop Found:</strong> {% if event_drop %}YES{% else %}NO{% endif %}<br>
    {% if event_drop %}
      <strong>Event Drop Title:</strong> {{ event_drop.title }}<br>
      <strong>Event Drop Handle:</strong> {{ event_drop.system.handle | default: event_drop.handle }}<br>
      <strong>Event Handle Field:</strong> {{ event_drop.event_handle }}<br>
    {% endif %}
  </div>
{% endif %}

<div class="section-background color-{{ section.settings.color_scheme }}"></div>
<div class="section section--{{ section.settings.section_width }} color-{{ section.settings.color_scheme }}">
  <div class="border-style custom-section-content">
    <div class="spacing-style layout-panel-flex layout-panel-flex--{{ section.settings.content_direction }} section-content-wrapper {% if section.settings.vertical_on_mobile %} mobile-column{% endif %}"
      style="{% render 'layout-panel-style', settings: section.settings %} {% render 'spacing-style', settings: section.settings %}"
      data-testid="section-content">
      
      {% comment %} Render blocks directly with event_drop in scope {% endcomment %}
      {% for block in section.blocks %}
        {% content_for 'block', type: block.type, id: block.id %}
      {% endfor %}
      
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Dynamic Image with Text",
  "class": "section-wrapper",
  "blocks": [
    {
      "type": "@theme"
    },
    {
      "type": "@app"
    },
    {
      "type": "_divider"
    }
  ],
  "settings": [
    {
      "type": "header",
      "content": "Dynamic Content (Metaobjects)"
    },
    {
      "type": "checkbox",
      "id": "enable_metaobject",
      "label": "Enable metaobject sourcing",
      "default": false,
      "info": "When enabled, blocks can pull content from a linked metaobject instead of manual inputs"
    },
    {
      "type": "text",
      "id": "mo_type",
      "label": "Metaobject type",
      "default": "event",
      "info": "The metaobject definition handle (e.g., 'event')"
    },
    {
      "type": "text",
      "id": "handle_mf_key",
      "label": "Product metafield key",
      "default": "custom.event_handle",
      "info": "Product metafield that stores the metaobject handle (namespace.key format)"
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "üîç Debug Mode",
      "default": false,
      "info": "Show debug information at the top of the section to troubleshoot metaobject connection"
    },
    {
      "type": "header",
      "content": "t:content.layout"
    },
    {
      "type": "select",
      "id": "content_direction",
      "label": "t:settings.direction",
      "options": [
        {
          "value": "column",
          "label": "t:options.vertical"
        },
        {
          "value": "row",
          "label": "t:options.horizontal"
        }
      ],
      "default": "row"
    },
    {
      "type": "checkbox",
      "id": "vertical_on_mobile",
      "label": "t:settings.vertical_on_mobile",
      "default": true
    },
    {
      "type": "select",
      "id": "horizontal_alignment",
      "label": "t:settings.alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.left"
        },
        {
          "value": "center",
          "label": "t:options.center"
        },
        {
          "value": "flex-end",
          "label": "t:options.right"
        },
        {
          "value": "space-between",
          "label": "t:options.space_between"
        },
        {
          "value": "space-around",
          "label": "t:options.space_around"
        },
        {
          "value": "space-evenly",
          "label": "t:options.space_evenly"
        }
      ],
      "default": "flex-start"
    },
    {
      "type": "select",
      "id": "vertical_alignment",
      "label": "t:settings.position",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.top"
        },
        {
          "value": "center",
          "label": "t:options.middle"
        },
        {
          "value": "flex-end",
          "label": "t:options.bottom"
        }
      ],
      "default": "center"
    },
    {
      "type": "select",
      "id": "horizontal_alignment_flex_direction_column",
      "label": "t:settings.alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.left"
        },
        {
          "value": "center",
          "label": "t:options.center"
        },
        {
          "value": "flex-end",
          "label": "t:options.right"
        }
      ],
      "default": "flex-start"
    },
    {
      "type": "select",
      "id": "vertical_alignment_flex_direction_column",
      "label": "t:settings.position",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.top"
        },
        {
          "value": "center",
          "label": "t:options.middle"
        },
        {
          "value": "flex-end",
          "label": "t:options.bottom"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "gap",
      "label": "t:settings.gap",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 32
    },
    {
      "type": "header",
      "content": "t:content.size"
    },
    {
      "type": "select",
      "id": "section_width",
      "label": "t:settings.width",
      "options": [
        {
          "value": "full-width",
          "label": "t:options.full_width"
        },
        {
          "value": "page-width",
          "label": "t:options.page_width"
        },
        {
          "value": "large",
          "label": "t:options.large"
        },
        {
          "value": "medium",
          "label": "t:options.medium"
        },
        {
          "value": "small",
          "label": "t:options.small"
        }
      ],
      "default": "page-width"
    },
    {
      "type": "select",
      "id": "section_height",
      "label": "t:settings.height",
      "options": [
        {
          "value": "",
          "label": "t:options.auto"
        },
        {
          "value": "small",
          "label": "t:options.small"
        },
        {
          "value": "medium",
          "label": "t:options.medium"
        },
        {
          "value": "large",
          "label": "t:options.large"
        },
        {
          "value": "custom",
          "label": "t:options.custom"
        }
      ],
      "default": ""
    },
    {
      "type": "header",
      "content": "t:content.appearance"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "select",
      "id": "background_media",
      "label": "t:settings.background_media",
      "options": [
        {
          "value": "none",
          "label": "t:options.none"
        },
        {
          "value": "image",
          "label": "t:options.image"
        },
        {
          "value": "video",
          "label": "t:options.video"
        }
      ],
      "default": "none"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "Dynamic Image with Text",
      "category": "t:categories.storytelling",
      "settings": {
        "content_direction": "row",
        "gap": 32,
        "padding-block-start": 40,
        "padding-block-end": 40
      },
      "blocks": {
        "image": {
          "type": "image",
          "settings": {
            "image": "",
            "image_ratio": "square"
          }
        },
        "group": {
          "type": "group",
          "settings": {
            "horizontal_alignment_flex_direction_column": "flex-start",
            "width": "custom"
          },
          "blocks": {
            "heading": {
              "type": "text",
              "name": "t:names.heading",
              "settings": {
                "text": "<h2>Event Title</h2>",
                "type_preset": "h3"
              }
            },
            "text": {
              "type": "text",
              "settings": {
                "text": "<p>Event description goes here.</p>",
                "max_width": "narrow"
              }
            }
          },
          "block_order": ["heading", "text"]
        }
      },
      "block_order": ["image", "group"]
    }
  ]
}
{% endschema %}
